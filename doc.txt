1.1
-------------------
Creating thread with the delegate ThreadStart

public static void ThreadMethod()
{
	for (int i = 0; i < 10; i++)
	{
		Console.WriteLine("ThreadProc {0}", 1);
		Thread.Sleep(0);
	}
}

public static void Main()
{
	Thread t = new Thread (new ThreadStart(ThreadMeathod));
	t.Start();
	for (int i = 0; i < 4; i++)
	{
		Console.WriteLine("Main Thread: Do some work");
		Thread.Sleep(0);
	}
	t.Join();
}

t.Join = waits for all thread to finish before program stops
-------------------------------
IsBackground = true;
IsForegorund = true;

by default foreground thread.
program waits if its forground thread.

---------------------------------
Passing value to thread:

public static void ThreadMethod(object o)
{
	for (int i = 0; i < (int)o; i++)
	{
		Console.WriteLine("ThreadProc {0}", i);
		Thread.Sleep(0);
	}
}

public static void Main()
{
	Thread t = new Thread (new ParameterizedThreadStart(ThreadMeathod));
	t.Start(15);
	t.Join();
}

----------------------------------------------------
lamda expression:

class Program
{
	Static void Main(string[] args)
	{
		bool stopped = false;
		Thread t = new Thread( new ThreadStart(() =>
		{	while(!stopped)
			{
				Console.WriteLine("Running");
				Thread.Sleep();
			}			
		}));
		t.Start();
	}
	
	Console.WriteLine("Press any key to exit");
	Console.ReadKey();

}

--------------------------------------------------------------
[ThreadStatic]
Static variable specially for each Thread

class Program
{
	[ThreadStatic]
	public static int _field;
	Static void Main(string[] args)
	{
		Thread t1 = new Thread( new ThreadStart(() =>
		{	
			for(int i = 0; i<10; i++))
			{
				_field++;
				Console.WriteLine("Thread A: {0}", _filed);				
			}
					
		}));
		t1.Start();

		Thread t2 = new Thread( new ThreadStart(() =>
		{	
			for(int i = 0; i<10; i++))
			{
				_field++;
				Console.WriteLine("Thread B: {0}", _filed);				
			}
					
		}));
		t2.Start();
	}
	
	Console.WriteLine("Press any key to exit");
	Console.ReadKey();

}

-------------------------------------------------------------
ThreadPool

class program
{
	static void Main(string[] args)
	{
		ThreadPool.QueueUserWorkItem((s) =>
		{
			Console.WriteLine("Working on a thread from the threadPool"};		
		});
		Console.ReadLine();
	}
}

---------------------------------------------------------------
Managed ThreadPool (Task)
Task is s managed Threadpool Thread

class Program
{
	static void Main(string[] args)
	{
		Task t = Task.Run(() =>
		{

			for(int i = 0; i< 100; i++)
			{
				Console.WriteLine('*');
			}
		});
		t.Wait();
	}
}




